import Foundation

final class Logger {
    @Dependency(\.printer)
    private var print: Printer
    private var numberOfMutationPoints: Int = 0
    private var progressBar: ProgressBar!

    func launched() {
        print(
            """
            \(muterLogoForTerminal)

            Automated mutation testing for Swift 🕳️

            You are running version \("\(version)".bold)

            Want help? Have suggestions? Want to get involved?
             ↳ https://github.com/muter-mutation-testing/muter/issues
            +--------------------------------------------------------+

            """
        )
    }

    func updateCheckStarted() {
        print("🔎 Checking for new versions...")
    }

    func updateCheckFinished(newVersion: String?) {
        if let newVersion {
            print("🎉 New version \(newVersion) available!")
        } else {
            print("✅ You are already using the latest of Muter")
        }
    }

    func projectCopyStarted() {
        print("✂️ Copying your project to a temporary directory for testing...")
    }

    func projectCopyFinished(destinationPath: String) {
        print(
            """
            ✅ Finished copying your project to a temporary directory for mutation testing.
            You can find your copied project here:

            \(destinationPath.bold)

            This directory will also serve as a backup for any XCTest logs that are generated by running your test suite.
            """
        )
    }

    func projectCoverageDiscoveryStarted() {
        print("⚙️ Running tests with coverage enabled to determine which files to mutate")
    }

    func projectCoverageDiscoveryFinished(success: Bool) {
        guard success == false else {
            return
        }

        print(
            """
            ❌ Gathering coverage failed.
            Proceeding with mutation testing anyway.
            Pass \("--skip-coverage argument".bold) to disable this step
            """
        )
    }

    func sourceFileDiscoveryStarted() {
        printMessage("🔎 Discovering Swift files which Muter will analyze...")
    }

    func sourceFileDiscoveryFinished(sourceFileCandidates: [String]) {
        let fileNames = sourceFileCandidates
            .map(URL.init(fileURLWithPath:))
            .map { $0.lastPathComponent }
            .joined(separator: "\n")
            .bold

        print("✅ In total, Muter discovered \(sourceFileCandidates.count) Swift files\n\n\(fileNames)")
    }

    func mutationsDiscoveryStarted() {
        printMessage("🔎 Analyzing source files to find mutants which can be inserted into your project...")
    }

    func mutationsDiscoveryFinished(mutations: [SchemataMutationMapping]) {
        let numberOfFiles = mutations.count
        var filesSummary: [String: Int] = [:]

        for mutation in mutations {
            numberOfMutationPoints += mutation.mutationSchemata.count
            filesSummary[mutation.fileName] = mutation.mutationSchemata.count
        }

        print("✅ In total, Muter discovered \(numberOfMutationPoints) mutants in \(numberOfFiles) files\n")
        for (fileName, mutantCount) in filesSummary {
            print("\(fileName) (\(mutantCount) mutants)".bold)
        }
    }

    func mutationTestingStarted() {
        printMessage(
            """
            🚀 Mutation testing will now begin
            ⚙️ Running your test suite to determine a baseline for mutation testing...
            """
        )
    }

    func newMutationTestLogAvailable(mutationTestLog: MutationTestLog) {
        if mutationTestLog.mutationPoint == nil {
            print(
                """
                📊 Determined baseline for mutation testing.
                🧟 Muter is now going to apply each mutant one at a time and run your test suite for each mutant.
                📃 After this step, Muter will generate a report detailing the efficacy of your test suite.
                ☕️ This step may take a while.

                """
            )

            progressBar = ProgressBar(
                count: numberOfMutationPoints,
                configuration: [
                    ProgressString(string: "Inserting mutant"),
                    ProgressOneIndexed(),
                    ProgressString(string: "\nPercentage complete: "),
                    ProgressPercent(),
                    ColoredProgressBarLine(barLength: 50),
                    SimpleTimeEstimate(
                        initialEstimate: Double(mutationTestLog.remainingMutationPointsCount!) * mutationTestLog
                            .timePerBuildTestCycle!
                    ),
                ],
                printer: ProgressBarMultilineTerminalPrinter(numberOfLines: 2)
            )
        }

        progressBar.next()
    }

    func mutationTestingFinished(
        report: String,
        reportPath: String,
        isExportingReport: Bool,
        didSaveReport: Bool
    ) {
        print("🏁 Muter finished running!")

        guard isExportingReport else {
            return print(
                """
                📝 Muter's report

                \(report)
                """
            )
        }

        if didSaveReport {
            print("📝 Report generated: \(reportPath.bold)")
        } else {
            print(report)
            print("\n")
            print("Could not save report!")
        }
    }

    func testPlanFileCreated(atPath path: String?) {
        if let path {
            print("💾 Mutation test plan created: \(path)")
        } else {
            print("💾 Mutation test plan created")
        }
    }

    func configurationFileCreated(atPath path: String?) {
        if let path {
            print("💾 Configuration file created at: \(path)")
        }
    }

    func muterMutationTestPlanLoaded() {
        print("⬆️ Muter mutation test plan loaded")
    }

    func print(_ message: String) {
        Swift.print(message)
    }

    private func printMessage(_ message: String) {
        print("+-----------------+")
        print(message)
    }
}

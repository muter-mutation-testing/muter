import Progress
import Foundation

final class Logger {
    private var numberOfMutationPoints: Int = 0
    private var progressBar: ProgressBar!
    
    func launched() {
        print(
                """
                
                \("""
                 _____       _
                |     | _ _ | |_  ___  ___
                | | | || | ||  _|| -_||  _|
                |_|_|_||___||_|  |___||_|
                """.green)
                
                Automated mutation testing for Swift
                
                You are running version \("\(version)".bold)
                
                Want help? Have suggestions? Want to get involved?
                 ‚Ü≥ https://github.com/muter-mutation-testing/muter/issues
                +------------------------------------------------+
                
                """
        )
    }
    
    func projectCopyStarted() {
        print("Copying your project to a temporary directory for testing...")
    }
    
    func projectCopyFinished(destinationPath: String) {
        print(
            """
            Finished copying your project to a temporary directory for mutation testing.
            You can find your copied project here:
            
            \(destinationPath.bold)
            
            This directory will also serve as a backup for any XCTest logs that are generated by running your test suite.
            """
        )
    }
    
    func projectCoverageDiscoveryStarted() {
        print("Running tests with coverage enabled to determine which files to mutate")
    }
    
    func projectCoverageDiscoveryFinished(success: Bool) {
        guard success == false else { return }
        
        print(
                """
                Gathering coverage failed.
                Proceeding with mutation testing anyway.
                Pass --skip-coverage argument to disable this step
                """
        )
    }
    
    func sourceFileDiscoveryStarted() {
        printMessage("Discovering Swift files which Muter will analyze...")
    }
    
    func sourceFileDiscoveryFinished(sourceFileCandidates: [String]) {
        let fileNames = sourceFileCandidates
            .map(URL.init(fileURLWithPath:))
            .map { $0.lastPathComponent }
            .joined(separator: "\n")
            .bold
        
        print("In total, Muter discovered \(sourceFileCandidates.count) Swift files\n\n\(fileNames)")
    }
    
    func mutationPointDiscoveryStarted() {
        printMessage("Analyzing source files to find mutants which can be inserted into your project...")
    }
    
    func mutationPointDiscoveryFinished(mutationPoints: [MutationPoint]) {
        numberOfMutationPoints = mutationPoints.count
        let numberOfFiles = mutationPoints
            .map(\.fileName)
            .deduplicated()
            .count
        
        print("In total, Muter discovered \(mutationPoints.count) mutants in \(numberOfFiles) files\n")
        for (fileName, mutantCount) in mutationPointsByFileName(from: mutationPoints) {
            print("\(fileName) (\(mutantCount) mutants)".bold)
        }
    }
    
    private func mutationPointsByFileName(from mutationPoints: [MutationPoint]) -> [String: Int] {
        mutationPoints.reduce(into: [:]) { partialResult, mutationPoint in
            partialResult[mutationPoint.fileName, default: 1] += 1
        }
    }
    
    func mutationTestingStarted() {
        printMessage("Mutation testing will now begin\nRunning your test suite to determine a baseline for mutation testing...")
    }
    
    func newMutationTestLogAvailable(mutationTestLog: MutationTestLog) {
        if mutationTestLog.mutationPoint == nil {
            print("""
                üìä Determined baseline for mutation testing.
                üßü Muter is now going to apply each mutant one at a time and run your test suite for each mutant.
                üìÉ After this step, Muter will generate a report detailing the efficacy of your test suite.
                ‚òïÔ∏è This step may take a while.
                
                """
            )

            progressBar = ProgressBar(
                count: numberOfMutationPoints,
                configuration: [
                    ProgressString(string: "Inserting mutant"),
                    ProgressOneIndexed(),
                    ProgressString(string: "\nPercentage complete: "),
                    ProgressPercent(),
                    ColoredProgressBarLine(barLength: 50),
                    SimpleTimeEstimate(
                        initialEstimate: Double(mutationTestLog.remainingMutationPointsCount!) * mutationTestLog.timePerBuildTestCycle!),
                ],
                printer: ProgressBarMultilineTerminalPrinter(numberOfLines: 2)
            )
        }

        progressBar.next()
    }
    
    private func print(_ message: String) {
        type(of: self).print(message)
    }
    
    private func printMessage(_ message: String) {
        type(of: self).printMessage(message)
    }
    
    static func print(_ message: String) {
        Swift.print(message)
    }
    
    static func printMessage(_ message: String) {
        print("+-----------------+")
        print(message)
    }
}
